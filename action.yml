name: 'K3D Cluster'
description: 'Create or destroy a k3d cluster in AWS'

inputs:
  cluster-action:
    description: 'Create or destroy a k3d cluster in AWS'
    required: true
    default: create
  aws-assume-role:
    description: 'IAM role for the identity provider to assume'
    required: false
    default: ""
  aws-region:
    description: 'AWS region to deploy to'
    required: false
    default: "us-west-2"
  unique-id:  # id of input
    description: 'unique id of cluster'
    required: false
    default: ""
  instance-size:
    description: 'AWS EC2 Instance Size to deploy on'
    required: false
    default: "m5.4xlarge" # vCPU: 16 -- RAM: 64GB
  k3d-config:
    description: 'k3d config file to use'
    required: false
    default: "k3d-config.yaml"
  ami-prefix:
    description: 'prefix of ami to use'
    required: false
    default: "uds-ci-k3d"
  k3s:
    description: 'k3s or k3d'
    required: false
    default: "false"


outputs:
  instance-id:
    description: 'Instance ID of the EC2 instance'
    value: ${{ steps.create-cluster.outputs.instance-id }}
  secret-name:
    description: 'Name of the Secrets Manager secret used to store the kubeconfig file'
    value: ${{ steps.create-cluster.outputs.secret-name }}
  sha:
    description: 'SHA of the git commit that triggered the workflow'
    value: ${{ steps.create-cluster.outputs.sha }}
  unique-id: # id of output
    description: 'unique id of the cluster'
    value: ${{ steps.create_cluster.outputs.unique_id }}

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      if: ${{ inputs.aws-assume-role != '' }} 
      with:
        role-to-assume: ${{ inputs.aws-assume-role }}
        role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
        aws-region: ${{ inputs.aws-region }}
        role-duration-seconds: 21600

    - name: Use provided unique ID
      shell: bash
      run: echo "ID=${{ inputs.unique-id }}" >> $GITHUB_ENV
      if: ${{ inputs.unique-id != '' }}

    - name: Set configs to use
      shell: bash
      run: |
        echo "INSTANCE_SIZE=${{ inputs.instance-size }}" >> $GITHUB_ENV
        echo "K3D_CONFIG=${{ inputs.k3d-config }}" >> $GITHUB_ENV
        echo "AMI_PREFIX=${{ inputs.ami-prefix }}" >> $GITHUB_ENV
        echo "K3S=${{ inputs.k3s }}" >> $GITHUB_ENV
    - name: Generate unique ID from SHA and job name
      shell: bash
      env:
        JOB_ID: ${{ github.job }}
        UNIQUE: "${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}"
        SHA: ${{ github.sha }}
      run: |
        GENERATED_ID=$(echo "${SHA:0:7}-${UNIQUE}") 
        echo "ID=$GENERATED_ID" >> $GITHUB_ENV
      if: ${{ inputs.unique-id == '' }} 

    - name: Create cluster
      id: create-cluster
      env:
        SHA: ${{ github.sha }}
        ID: ${{ env.ID }}
        INSTANCE_SIZE: ${{ env.INSTANCE_SIZE }}
        K3D_CONFIG: ${{ env.K3D_CONFIG }}
        AMI_PREFIX: ${{ env.AMI_PREFIX }}
        K3S: ${{ env.k3s }}
      if: ${{ inputs.cluster-action == 'create' }}
      working-directory: ${{ github.action_path }}/terraform
      shell: bash
      run: |
        ${{ github.action_path }}/terraform/create-cluster.sh
        echo "sha=${SHA}" >> $GITHUB_OUTPUT
        echo "unique-id=${ID}" >> $GITHUB_OUTPUT
    - name: Teardown cluster
      if: ${{ inputs.cluster-action == 'destroy' }} 
      env:
        SHA: ${{ github.sha }}
        ID: ${{ env.ID }}
        INSTANCE_SIZE: ${{ env.INSTANCE_SIZE }}
        K3D_CONFIG: ${{ env.K3D_CONFIG }}
        AMI_PREFIX: ${{ env.AMI_PREFIX }}
        K3S: ${{ env.k3s }}
      working-directory: ${{ github.action_path }}/terraform
      shell: bash
      run: ${{ github.action_path }}/terraform/teardown-cluster.sh
