name: "Test UDS k3d CI Infra"

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "**.md"
      - "**.json"
      - ".gitignore"

  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "**.md"
      - "**.json"
      - ".gitignore"

permissions:
  id-token: write
  contents: read

jobs:
  # use paths-filter action to derive which jobs to run based on changes
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      packer: ${{ steps.filter.outputs.packer }}
      terraform: ${{ steps.filter.outputs.terraform }}
      workflows: ${{ steps.filter.outputs.workflows }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          packer:
            - 'packer/**'
          terraform:
            - 'terraform/**'
          workflows:
            - action.yml
            - '.github/**'

  build-ami:
    needs: check-changes
    if: needs.check-changes.outputs.packer == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_COMMERCIAL_ROLE_TO_ASSUME }}
          role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha }}
          aws-region: us-west-2
          # 21600 seconds == 6 hours
          role-duration-seconds: 21600

      - name: Packer init
        run: packer init .
        working-directory: packer

      - name: Packer build
        run: packer build .
        working-directory: packer

  test-k3d-infra:
    runs-on: ubuntu-latest
    # Run if changes on are picked up in terraform or workflow files. Depend on build-ami if that job triggers.
    needs: [build-ami, check-changes]
    if: (needs.build-ami.result == 'success' || needs.build-ami.result == 'skipped') && (needs.check-changes.outputs.terraform == 'true' || needs.check-changes.outputs.workflows == 'true' )
    # Test with parallel jobs using and not using unique input
    strategy:
      matrix: 
        unique_id: ["", "uid-12345"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Zarf
        # This uses the default options (latest version of zarf, no init package)
        uses: defenseunicorns/setup-zarf@main

        # Test passing in role arn and region
      - name: Create Cluster Via Action
        id: create_cluster
        uses: ./
        with:
          cluster-action: create
          aws-assume-role: ${{ secrets.AWS_COMMERCIAL_ROLE_TO_ASSUME }}
          aws-region: us-west-2
          unique-id: ${{ matrix.unique_id }}
      # Test cluster access in same job
      - name: Show Cluster
        run: |
            zarf tools kubectl get nodes
            zarf tools kubectl config get-contexts
      # Test cluster access would work across jobs via secret value
      - name: Delete kubeconfig and test secret manager secret
        run: |
            rm -rf ~/.kube/config
            aws secretsmanager get-secret-value \
              --secret-id "${{ steps.create_cluster.outputs.secret-name }}" \
              --query 'SecretString' \
              --output text > ~/.kube/config
            zarf tools kubectl get nodes
            zarf tools kubectl config get-contexts
      # Test with role already assumed
      - name: Destroy Cluster via Action 
        if: always()
        uses: ./
        with:
          cluster-action: destroy
          aws-assume-role: ""
          unique-id: ${{ matrix.unique_id }}

