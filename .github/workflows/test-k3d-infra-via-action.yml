name: "Test UDS k3d CI Infra and Action"

on:
  push:
    branches:
      - "main"
      - "fix_random_id_state_key"
    paths:
      - "terraform/**"
      - ".github/**"

  pull_request:
    branches:
      - "main"
    paths:
      - "terraform/**"
      - ".github/**"

permissions:
  id-token: write
  contents: read
jobs:
  test-k3d-infra:
    runs-on: ubuntu-latest
    strategy:
      # Test with parallel jobs using and not using unique input
     matrix: 
        unique_id: ["", "", "test-unique-id-12345"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Zarf
        # This uses the default options (latest version of zarf, no init package)
        uses: defenseunicorns/setup-zarf@main
        # Test passing in role arn and region
      - name: Create Cluster Via Action
        id: create_cluster
        uses: ./
        with:
          cluster_action: create
          aws_assume_role: ${{ secrets.AWS_COMMERCIAL_ROLE_TO_ASSUME }}
          aws_region: us-west-2
          unique_id: ${{ matrix.unique_id }}
      # Test cluster access in same role
      - name: Show Cluster
        run: |
            zarf tools kubectl get nodes
            zarf tools kubectl config get-contexts
      - name: Delete kubeconfig and test secret manager secret
        run: |
            echo ${{ steps.create_cluster.outputs.secret_name }}
            echo ${{ steps.create_cluster.outputs.instance_id }}
            echo ${{ steps.create_cluster.outputs.sha }}
            # Cleanup existing kubeconfig
            rm -rf ~/.kube/config
            # pull new kubeconfig
            aws secretsmanager get-secret-value \
              --secret-id "${{ steps.create_cluster.outputs.secret_name }}" \
              --query 'SecretString' \
              --output text > ~/.kube/config
            # test newly pulled kubeconfig works
            zarf tools kubectl get nodes
            zarf tools kubectl config get-contexts
      # Test with role already assumed
      - name: Destroy Cluster via Action 
        if: always()
        uses: ./
        with:
          cluster_action: destroy
          aws_assume_role: ""
          unique_id: ${{ matrix.unique_id }}

